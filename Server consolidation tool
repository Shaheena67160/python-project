import pandas as pd
import numpy as np

# Load server data
data = {
    'server_id': ['server1', 'server2', 'server3'],
    'cpu_usage': [40, 70, 30],  # % CPU usage
    'memory_usage': [50, 60, 40],  # % Memory usage
    'disk_usage': [30, 45, 20]  # % Disk usage
}

df = pd.DataFrame(data)

# Assume target server's capacity is 100% for CPU and memory
TARGET_CPU_CAPACITY = 100
TARGET_MEMORY_CAPACITY = 100

# Calculate total usage
total_cpu_usage = df['cpu_usage'].sum()
total_memory_usage = df['memory_usage'].sum()

# Estimate number of servers needed for consolidation
num_servers_cpu = np.ceil(total_cpu_usage / TARGET_CPU_CAPACITY)
num_servers_memory = np.ceil(total_memory_usage / TARGET_MEMORY_CAPACITY)

# Take the max of both as the number of servers we need
consolidated_servers = max(num_servers_cpu, num_servers_memory)

# Print results
print(f"Total CPU usage: {total_cpu_usage}%")
print(f"Total Memory usage: {total_memory_usage}%")
print(f"Estimated number of consolidated servers needed: {int(consolidated_servers)}")

# Simulate load distribution
def distribute_workloads(df, num_servers):
    workloads = []
    df = df.sort_values(by=['cpu_usage'], ascending=False)  # Sort by CPU usage for better load balancing
    
    for i in range(int(num_servers)):
        workloads.append({'server_id': f'new_server{i+1}', 'cpu_usage': 0, 'memory_usage': 0})
    
    for idx, row in df.iterrows():
        # Find the server with the least load
        least_loaded_server = min(workloads, key=lambda x: x['cpu_usage'])
        least_loaded_server['cpu_usage'] += row['cpu_usage']
        least_loaded_server['memory_usage'] += row['memory_usage']
    
    return workloads

# Distribute workloads across the consolidated servers
consolidated_workloads = distribute_workloads(df, consolidated_servers)

# Output the distribution
for server in consolidated_workloads:
    print(f"Server {server['server_id']} - CPU Usage: {server['cpu_usage']}%, Memory Usage: {server['memory_usage']}%")
